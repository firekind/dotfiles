#!/usr/bin/env python3

import os
import sys
import json
import shutil
from typing import List, Dict, Callable
import subprocess
import argparse

# Global variables
config: Dict[str, str] = {}
_preinstall: List = []
_postinstall: List = []
_core: List = []

# tags
_i3_tag = "i3"
_xmonad_tag = "xmonad"

# argparser
parser = argparse.ArgumentParser("install dotfiles and required programs")
parser.add_argument(
    "--wm", choices=[_i3_tag, _xmonad_tag], help="window manager to install"
)
parser.add_argument(
    "--config", type=str, default="config.json", help="config file path"
)
args = parser.parse_args()

# helper decorators
#
def preinstall(func: Callable):
    _preinstall.append(func)
    return func


def postinstall(func: Callable):
    _postinstall.append(func)
    return func


def core(tag: str = None):
    def decorator(func):
        if tag == None or tag == args.wm:
            _core.append(func)
        return func

    return decorator


# stuff to do before installing
#
@preinstall
def check_requirements():
    execute_command("sudo pacman -Sy")

    # checking if git exists
    res = execute_command("pacman -Q git &> /dev/null")
    if res.returncode != 0:
        print(" -> installing: git")
        execute_command("sudo pacman -S git --noconfirm")

    # checking if yay exists
    res = execute_command("pacman -Q yay &> /dev/null")
    if res.returncode != 0:
        print(" -> installing: yay")
        execute_command("sudo pacman -S base-devel --noconfirm")
        execute_command("git clone https://aut.archlinux.org/yay.git")
        os.chdir("yay")
        execute_command("makepkg -rsci --noconfirm")
        os.chdir("..")
        execute_command("sudo rm -r yay")


@preinstall
def backup():
    try:
        os.mkdir(config["backup_dir"])
    except FileExistsError:
        print("backup directory exists!", file=sys.stderr)
        sys.exit(-1)

    for _, paths_to_backup in config["backup"].items():
        for path in paths_to_backup:
            path = os.path.expanduser(path)

            if os.path.exists(path):
                shutil.move(path, config["backup_dir"])


# actual installation
#
@core
def install_base():
    install_packages(config["packages"]["base"])


@core(tag=_i3_tag)
def install_i3():
    install_packages(config["packages"][_i3_tag])


@core(tag=_xmonad_tag)
def install_xmonad():
    install_packages(config["packages"][_xmonad_tag])


@core
def install_dotfiles():
    execute_command("stow -t ~ " + " ".join(config["dotfiles"][args.wm]))


# stuff to do after installation
#
@postinstall
def change_shell():
    execute_command("chsh -s /usr/bin/zsh")


@postinstall
def change_background():
    wallpaper_dir = os.path.expanduser("~/Pictures/Wallpapers")
    if not os.path.exists(wallpaper_dir):
        execute_command("mkdir -p %s" % wallpaper_dir)
        execute_command("cp res/wallpapers/* %s" % wallpaper_dir)

    execute_command("~/.scripts/change-bg ~/Pictures/Wallpapers/forest.jpg")


@postinstall
def update_gtkcss():
    gtk_dir = os.path.expanduser("~/.config/gtk-3.0")
    if not os.path.exists(gtk_dir):
        os.mkdir(gtk_dir)

    css_path = os.path.join(gtk_dir, "gtk.css")
    with open(css_path, "a") as f:
        f.write(
            "VteTerminal,"
            "TerminalScreen,"
            "vte-terminal {"
            "padding: 10px 10px 10px 10px;"
            "-VteTerminal-inner-border: 10px 10px 10px 10px;"
            "}"
        )


# utility functions
#
def install_packages(packages: List[str]):
    command_str = (
        "yay -S --needed --answerclean All --answerdiff None --removemake"
        + " ".join(packages)
    )
    res = execute_command(command_str)

    if res.returncode != 0:
        print("error running command %s\nError: %s", command_str, res.stderr)
        sys.exit(-1)


def load_config():
    global config
    config = json.loads(args.config)


def execute_command(command: str) -> subprocess.CompletedProcess:
    return subprocess.run(command.split())


# main function
#
def main():
    load_config()
    func_list = _preinstall + _core + _postinstall
    
    for func in func_list:
        func()


if __name__ == "__main__":
    main()
